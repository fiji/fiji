#!/bin/sh
/*/. 2>/dev/null; exec "$(dirname "$0")"/ImageJ.sh "$0" "$@" # exec with fiji */

import fiji.build.Fake;

import imagej.updater.util.DependencyAnalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

if (bsh.args.length > 0 && bsh.args[0].equals("-debug")) {
	System.setProperty("scijava.log.level", "debug");
	args = new String[bsh.args.length - 1];
	if (args.length > 0)
		System.arraycopy(bsh.args, 1, args, 0, args.length);
	bsh.args = args;
}

if (bsh.args.length == 0) {
	System.err.println("Usage: " + this.interpreter.getSourceFileInfo()
		+ " [-debug] <file.jar>...");
	System.exit(1);
}

String editClasspath(String contents, String target, String match, String replacement) {
	String before = "([^\n]*\\\\\n)*([^\n]*:)*";
	String after = "[:\n]";
	if (match.equals("")) {
		before = "()()";
		after = ".";
		if (!replacement.endsWith(":"))
			replacement += ":";
	}
	String regex = ".*\nCLASSPATH\\(" + target + "\\)=" + before + "(" + match + ")" + after + ".*";
	Pattern pattern = Pattern.compile(regex, Pattern.DOTALL | Pattern.MULTILINE);
	Matcher matcher = pattern.matcher(contents);
	if (matcher.matches()) {
		int start = matcher.start(3);
		int end = matcher.end(3);
		if (replacement.equals("")) {
			if (contents.charAt(start - 1) == ':')
				start--;
			else if (contents.charAt(end) == ':')
				end++;
		}
		else if (contents.charAt(end) == '\n' && replacement.endsWith(":"))
			replacement = replacement.substring(0, replacement.length() - 1);
		return contents.substring(0, start) + replacement + contents.substring(end);
	}
	if (match.equals("")) {
		int offset = contents.indexOf("\nCLASSPATH(" + target +")=");
		if (offset < 0 && (offset = contents.indexOf("\n\n# pre-Java5 generics ;-)\n")) >= 0)
			return contents.substring(0, offset + 1)
				+ "CLASSPATH(" + target + ")=" + replacement.substring(0, replacement.length() - 1)
				+ contents.substring(offset);
	}
	print("Warning: " + match + " not found in " + target + "'s CLASSPATH");
	return contents;
}

ijDir = System.getProperty("ij.dir");
ijRoot = new File(ijDir);
DependencyAnalyzer da = new DependencyAnalyzer(ijRoot);
if (bsh.args.length > 0 && (bsh.args[0].equals("--check-fakefile") || bsh.args[0].equals("--fix-fakefile"))) {
	fix = bsh.args[0].equals("--fix-fakefile");
	if (!ijDir.endsWith("/"))
		ijDir += "/";
	fake = new Fake();
	parser = fake.parse(new FileInputStream(ijDir + "Fakefile"),
		new File(ijDir));
	parser.parseRules(new ArrayList());

	targets = new ArrayList();
	if (bsh.args.length > 1)
		for (i = 1; i < bsh.args.length; i++)
			targets.add(bsh.args[i]);
	else
		for (String target : parser.getAllRules().keySet()) {
			String className = parser.getRule(target).getClass().getName();
			if (className.endsWith("CompileJar") || className.endsWith("CompileClass") || className.endsWith("SubFake"))
				targets.add(target);
		}

	if (fix)
		contents = new String(fake.readFile(ijDir + "Fakefile"));

	for (String target : targets) {
		rule = parser.getRule(target);
		if (rule == null) {
			print("No rule found for " + target);
			continue;
		}
		analyzed = new HashSet();
		dependencies = da.getDependencies(ijRoot, target);
		if (dependencies == null) {
			print("No dependencies found for " + target);
			continue;
		}
		for (String dependency : dependencies)
			analyzed.add(dependency);
		inFakefile = new HashSet();
		classPath = rule.getVar("CLASSPATH");
		if (classPath != null)
			for (String dependency : fake.split(classPath, ":")) {
				if (dependency.startsWith(ijDir))
					dependency = dependency.substring(ijDir.length());
				inFakefile.add(dependency);
			}

		message = "";
		for (String dependency : inFakefile) {
			if (dependency.endsWith("/tools.jar") &&
					target.equals("plugins/Script_Editor.jar"))
				continue;
			if (!analyzed.contains(dependency)) {
				message += " " + dependency;
				if (fix)
					contents = editClasspath(contents, target, dependency, "");
			}
		}
		if (!message.equals(""))
			print("Target " + target + " has extra elements in the "
				+ "classpath:" + message);

		message = "";
		for (String dependency : analyzed)
			if (!inFakefile.contains(dependency) &&
					parser.getRule(dependency) != null) {
				message += " " + dependency;
				if (fix)
					contents = editClasspath(contents, target, "", dependency);
			}

		if (!message.equals(""))
			print("Target " + target + " misses elements in the "
				+ "classpath: " + message);
	}

	if (fix) {
		FileOutputStream out = new FileOutputStream(ijDir + "Fakefile");
		out.write(contents.getBytes());
		out.close();
	}

	return;
}

if (bsh.args[0].equals("-v")) {
	import ij.IJ;
	IJ.debugMode = true;
	args = new String[bsh.args.length - 1];
	System.arraycopy(bsh.args, 1, args, 0, args.length);
	bsh.args = args;
}

for (String arg : bsh.args) {
	print("[" + arg + "]");
	dependencies = da.getDependencies(ijRoot, arg);
	if (dependencies == null) {
		print("Not found: " + arg);
		continue;
	}
	Iterator iter = dependencies.iterator();
	while (iter.hasNext()) {
		String dep = iter.next();
		print("\t" + dep);
	}
  print("");
}
