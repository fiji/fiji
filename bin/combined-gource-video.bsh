#!/bin/sh
// 2>&1 | :; exec "$(dirname "$0")"/ImageJ.sh --bsh "$0" "$@" # exec with fiji */

if (bsh.args.length != 1 && bsh.args.length != 2) {
	System.err.println("Usage: " + this.interpreter.getSourceFileInfo()
		+ " <since.when> [<until.when>]");
	System.exit(1);
}

since = bsh.args[0];
until = bsh.args.length > 1 ? bsh.args[1] : null;

import java.io.BufferedReader;
import java.io.InputStreamReader;

void dumpStream(inputStream) {
	reader = new BufferedReader(new InputStreamReader(inputStream));
	new Thread() {
		public void run() {
			for (;;) try {
				String line = reader.readLine();
				if (line == null)
					break;
				print(line);
			} catch (Throwable t) { /* ignore */ }
			reader.close();
		}
	}.start();
}

class Logger {
	final static String LOG4GOURCE = "log --reverse --raw --pretty=raw";
	String command, prefix, line;
	StringBuffer buffer;
	long commitTime;
	Process process;
	BufferedReader reader;

	public Logger(String gitDirectory, String prefix, String since, String until) {
		command = "git --git-dir=" + gitDirectory + "/.git "
			+ LOG4GOURCE + " --since=" + since.replace(' ', '.')
			+ (until == null ? "" : " --until=" + until.replace(' ', '.'));
		this.prefix = prefix;
		process = Runtime.getRuntime().exec(command);
		reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		dumpStream(process.getErrorStream());
		readLine();
	}

	boolean readLine() {
		try {
			line = reader.readLine();
			return true;
		} catch (Exception e) {
			line = null;
			return false;
		}
	}

	public boolean readOneCommit() {
		if (line == null || !line.startsWith("commit ")) {
			commitTime = Long.MAX_VALUE;
			return false;
		}
		buffer = new StringBuffer();
		do {
			if (line.startsWith("committer ")) {
				int end = line.length();
				int space = line.lastIndexOf(' ');
				if (space >= 0 && space + 1 < end &&
						line.charAt(space + 1) == '+') {
					end = space;
					space = line.lastIndexOf(' ', end - 1);
				}
				if (space >= 0)
					commitTime = Long.parseLong(line
						.substring(space + 1, end));
			}
			else if (line.startsWith(":") && line.length() > 38)
				line = line.substring(0, 39) + prefix
					+ line.substring(39);

			buffer.append(line);
			buffer.append('\n');

			readLine();
		} while (line != null && !line.startsWith("commit "));
		return true;
	}

	public String toString() {
		return buffer.toString();
	}
}

loggers = new ArrayList();
ijDir = System.getProperty("ij.dir") + "/";
loggers.add(new Logger(ijDir, "", since, until));
for (sub : new String[] { "ImageJA", "TrakEM2", "imglib", "mpicbg" })
	loggers.add(new Logger(ijDir + "modules/" + sub, sub + "/", since, until));
for (l : loggers)
	l.readOneCommit();

import java.io.FileWriter;

writer = new FileWriter(ijDir + "out.gource");
for (;;) {
	logger = null;
	time = Long.MAX_VALUE;
	for (l : loggers)
		if (l.commitTime <time) {
			time = l.commitTime;
			logger = l;
		}
	if (logger == null)
		break;
	writer.write(logger.toString());
	logger.readOneCommit();
}
writer.close();

gource = "gource";
process = Runtime.getRuntime().exec(new String[] {
	gource,
	"-800x600",
	"-s", "1",
	"--disable-auto-skip",
	"--disable-progress",
	"--hide-filenames",
	"--output-movie", ijDir + "gource.flv",
	ijDir + "out.gource" });
dumpStream(process.getErrorStream());
process.waitFor();
