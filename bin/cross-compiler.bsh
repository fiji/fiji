#!/bin/sh
/*/. 2>/dev/null; exec "$(dirname "$0")"/../ImageJ "$0" "$@" # exec with fiji */

if (bsh.args.length < 1) {
	System.err.println("Usage: " + this.interpreter.getSourceFileInfo()
		+ "<platform> [<cflags>...]");
	System.exit(1);
}

platform = bsh.args[0];
cflags = new String[bsh.args.length - 1];
System.arraycopy(bsh.args, 1, cflags, 0, cflags.length);

import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.InputStreamReader;

import java.util.Arrays;

append(args, args2) {
	if (args instanceof String)
		args = new String[] { args };
	if (args2 instanceof String)
		args2 = new String[] { args2 };
	result = new String[args.length + args2.length];
	System.arraycopy(args, 0, result, 0, args.length);
	System.arraycopy(args2, 0, result, args.length, args2.length);
	return result;
}

filterOut(args, arg) {
	j = 0;
	for (i = 0; i < args.length; i++)
		if (!args[i].equals(arg))
			args[j++] = args[i];
	if (j < i) {
		result = new String[j];
		System.arraycopy(args, 0, result, 0, j);
		return result;
	}

	return args;
}

dump(inputStream, printStream) {
	reader = new BufferedReader(new InputStreamReader(inputStream));
	for (;;) {
		line = reader.readLine();
		if (line == null)
			break;
		printStream.println(line);
	}
	reader.close();
}

execute(args) {
	print(Arrays.toString(args));
	process =  Runtime.getRuntime().exec(args);
	dump(process.getErrorStream(), System.err);
	dump(process.getInputStream(), System.out);
	try {
		int exitCode = process.waitFor();
		if (exitCode != 0)
			throw new RuntimeException("Exit code " + exitCode + " while executing " + Arrays.toString(args));
	} catch (InterruptedException e) {
		process.destroy();
		throw new RuntimeException("Interrupted " + Arrays.toString(args));
	}
}

compile(prefix, platform, cflags, exe) {
	cc = prefix + "gcc";
	strip = prefix + "strip";
	windres = prefix + "windres";
	target = "precompiled/ImageJ-" + platform + exe;

	source = "ImageJ.c";
	if (platform.startsWith("win")) {
		cflags = filterOut(cflags, "-mno-cygwin");
		res = new FileWriter("tmp.rc");
		res.write("101 ICON images/fiji.ico\n");
		res.close();
		if (platform.equals("win32"))
			m32 = "--target=pe-i386";
		else
			m32 = "--target=pe-x86-64";
		args = new String[] { windres, m32, "-o", "tmp.o", "-i", "tmp.rc" };
		execute(args);
		source = append(source, "tmp.o");
	}

	args = append(append(new String[] { cc, "-o", target }, cflags), source);
	execute(args);
	args = new String[] { strip, target};
	execute(args);
}

if (platform.equals("win64"))
	compile("bin/win-sysroot/bin/x86_64-w64-mingw32-", platform, cflags, ".exe");
else if (platform.equals("win32"))
	compile("bin/win-sysroot/bin/x86_64-w64-mingw32-", platform, append(cflags, "-m32"), ".exe");
else if (platform.equals("linux") || platform.equals("linux32"))
	compile("", platform, append(cflags, "-m32"), "");
else if (platform.equals("linux64"))
	compile("", platform, append(cflags, "-m64"), "");
else if (platform.equals("macosx") || platform.startsWith("tiger") || (platform.equals("leopard"))) {
	prefixppc = "bin/mac-sysroot/bin/powerpc-apple-darwin8-";
	prefix32 = "bin/mac-sysroot/bin/i686-apple-darwin8-";
	prefix64 = "bin/mac-sysroot/bin/x86_64-apple-darwin8-";
	extra = new String[] { "-isysroot", "bin/mac-sysroot", "-Ibin/mac-sysroot/usr/i686-apple-darwin8/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/" };
	cflags2 = append(cflags, extra);
	if (platform.startsWith("tiger"))
		compile(prefixppc, "tiger-ppc", append(cflags2, "-m32"), "");
	if (platform.equals("macosx") || platform.startsWith("tiger"))
		compile(prefix32, "tiger-i686", append(cflags2, "-m32"), "");
	if (platform.equals("macosx") || platform.equals("leopard"))
		compile(prefix64, "leopard", append(cflags2, "-m64"), "");
	if (platform.equals("tiger")) {
		args = new String[] { prefix64 + "lipo", "-create", "precompiled/ImageJ-tiger-ppc", "precompiled/ImageJ-tiger-i686", "-output", "precompiled/ImageJ-tiger" };
		execute(args);
	}
	if (platform.equals("macosx")) {
		args = new String[] { prefix64 + "lipo", "-create", "precompiled/ImageJ-tiger-i686", "precompiled/ImageJ-leopard", "-output", "precompiled/ImageJ-macosx" };
		execute(args);
	}
}
else {
	print("Unsupported platform:" + platform);
	System.exit(1);
}
