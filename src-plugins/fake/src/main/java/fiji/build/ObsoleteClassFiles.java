package fiji.build;

import java.io.File;
import java.io.PrintStream;

import java.util.ArrayList;
import java.util.List;

/**
 * Take care of .class files left over from previous builds
 */
public class ObsoleteClassFiles {
	protected PrintStream err;
	protected List<File> obsoleteFiles;

	public ObsoleteClassFiles(File sourceDirectory, File targetDirectory) {
		this(System.err, sourceDirectory, targetDirectory);
	}

	public ObsoleteClassFiles(PrintStream err, File sourceDirectory, File targetDirectory) {
		obsoleteFiles = new ArrayList<File>();
		if (targetDirectory == null)
			targetDirectory = sourceDirectory;
		init(sourceDirectory, targetDirectory);
	}

	protected void init(File sourceDirectory, File targetDirectory) {
		File[] list = targetDirectory.listFiles();
		if (list != null)
			for (File file : list) {
				File source = new File(sourceDirectory, file.getName());
				if (file.isDirectory())
					init(source, file);
				else if (file.getName().endsWith(".class"))
					initFile(source, file);
			}
	}

	protected void initFile(File source, File target) {
		String name = source.getName();
		int dollar = name.indexOf('$');
		if (dollar > 0) {
			name = name.substring(0, dollar) + ".class";
			source = new File(source.getParentFile(), name);
		}

		if (source.exists())
			return;

		// the .java file was not found;
		// it could still be a non-public class defined in a different file
		byte[] contents = Util.readFile(target.getPath());
		ByteCodeAnalyzer analyzer = new ByteCodeAnalyzer(contents, true);
		String sourceFile = analyzer.getSourceFile();

		source = new File(source.getParentFile(), sourceFile);
		if (source.exists()) {
			if (source.lastModified() > target.lastModified())
				obsoleteFiles.add(target);
			return;
		}

		// TODO: optionally remember the time when the compilation started and complain loudly if the file was obviously generated by the compilation
		obsoleteFiles.add(target);
	}

	public boolean removeFiles() {
		boolean result = true;
		for (File file : obsoleteFiles)
			if (!file.delete()) {
				err.println("Could not delete " + file);
				result = false;
			}
		return result;
	}

	public static void main(String[] args) {
		if (args.length != 2) {
			System.err.println("Usage: <arg0> <source-dir> <target-dir>");
			System.exit(1);
		}

		ObsoleteClassFiles obsolete = new ObsoleteClassFiles(new File(args[0]), new File(args[1]));
		for (File ob : obsolete.obsoleteFiles)
			System.err.println("obsolete: " + ob);
	}
}
