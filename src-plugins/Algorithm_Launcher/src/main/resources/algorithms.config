#
# algorithms.config
#

# Simple imglib algorithm launcher.
# Copyright (c) 2010, UW-Madison LOCI.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the UW-Madison LOCI nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY UW-MADISON LOCI ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL UW-MADISON LOCI BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Bandpass Filter: mpicbg.imglib.algorithm.fft.Bandpass(Image img, int Begin_radius = 0, int End_radius = 32)
Fourier Convolution: mpicbg.imglib.algorithm.fft.FourierConvolution(Image img, Image Kernel)
Floyd-Steinberg Dithering: mpicbg.imglib.algorithm.floydsteinberg.FloydSteinbergDithering(Image img, float Dithering_threshold = 100)
Downsample: mpicbg.imglib.algorithm.gauss.DownSample(Image img, float Scale_factor = 0.5)
Normalize Image Float: mpicbg.imglib.algorithm.math.NormalizeImageFloat(Image img)

# These algorithms operate on ComplexType rather than RealType:
#Fourier Transform: mpicbg.imglib.algorithm.fft.FourierTransform(Image img)

# These algorithms have only difficult constructors:
#mpicbg.imglib.algorithm.CanvasImage
#Inverse Fourier Transform: mpicbg.imglib.algorithm.fft.InverseFourierTransform
#Gassian Convolution: mpicbg.imglib.algorithm.gauss.GaussianConvolution
#Affine 3D Transform: mpicbg.imglib.algorithm.transformation.Affine3DImageTransform
#Affine Transform: mpicbg.imglib.algorithm.transformation.ImageTransform

# These algorithms do not implement OutputAlgorithm:
#Hough Transform: mpicbg.imglib.algorithm.transformation.HoughTransform
#Phase Correlation: mpicbg.imglib.algorithm.fft.PhaseCorrelation(Image img, Image Image2, int Number_of_peaks, boolean Verify_with_cross_correlation)
